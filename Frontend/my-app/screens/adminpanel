import React, { useEffect, useState } from 'react';
import { View, ScrollView, Alert, StyleSheet } from 'react-native';
import { Text, Card, Button, Divider } from 'react-native-paper';
import axios from 'axios';

 function AdminPanel() {
  const [pendingUsers, setPendingUsers] = useState([]);
  const [pendingJobs, setPendingJobs] = useState([]);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const userRes = await axios.get('http://your-ip:5000/api/admin/users/pending');
      const jobRes = await axios.get('http://your-ip:5000/api/admin/jobs/pending');
      setPendingUsers(userRes.data);
      setPendingJobs(jobRes.data);
    } catch (error) {
      console.error(error);
      Alert.alert("Error", "Could not fetch admin data.");
    }
  };

  const updateUserStatus = async (id, status) => {
    try {
      await axios.post(`http://your-ip:5000/api/admin/users/${id}/status`, { status });
      fetchData();
    } catch (err) {
      Alert.alert("Error", "User update failed");
    }
  };

  const updateJobStatus = async (id, status) => {
    try {
      await axios.post(`http://your-ip:5000/api/admin/jobs/${id}/status`, { status });
      fetchData();
    } catch (err) {
      Alert.alert("Error", "Job update failed");
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.heading}>Admin Panel</Text>

      <Text style={styles.subheading}>Pending User Approvals</Text>
      {pendingUsers.map((user) => (
        <Card key={user.id} style={styles.card}>
          <Card.Title title={user.name} subtitle={`Role: ${user.role}`} />
          <Card.Actions>
            <Button onPress={() => updateUserStatus(user.id, 'approved')}>Approve</Button>
            <Button onPress={() => updateUserStatus(user.id, 'rejected')} textColor="red">Reject</Button>
          </Card.Actions>
        </Card>
      ))}

      <Divider style={styles.divider} />

      <Text style={styles.subheading}>Pending Job Approvals</Text>
      {pendingJobs.map((job) => (
        <Card key={job.id} style={styles.card}>
          <Card.Title title={job.title} subtitle={`Company: ${job.company}`} />
          <Card.Content>
            <Text>{job.description}</Text>
          </Card.Content>
          <Card.Actions>
            <Button onPress={() => updateJobStatus(job.id, 'approved')}>Approve</Button>
            <Button onPress={() => updateJobStatus(job.id, 'rejected')} textColor="red">Reject</Button>
          </Card.Actions>
        </Card>
      ))}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 12,
    backgroundColor: 'white'
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    marginVertical: 10,
    textAlign: 'center'
  },
  subheading: {
    fontSize: 18,
    marginVertical: 10
  },
  card: {
    marginBottom: 12
  },
  divider: {
    marginVertical: 20
  }
});
export default AdminPanel;
